{"version":3,"file":"auth.ts","sources":["C:\\Users\\lucas\\Projets\\ExpressKanbanApi\\KanbanExpressAPi\\src\\modules\\auth.ts"],"names":[],"mappings":";;;;;;AAAA,gEAA8B;AAC9B,oDAA2B;AAEpB,MAAM,gBAAgB,GAAG,CAAC,QAAQ,EAAE,IAAI,EAAE,EAAE;IACjD,OAAO,gBAAM,CAAC,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAA;AACvC,CAAC,CAAA;AAFY,QAAA,gBAAgB,oBAE5B;AAEM,MAAM,YAAY,GAAG,CAAC,QAAQ,EAAE,EAAE;IACvC,OAAO,gBAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAA;AACjC,CAAC,CAAA;AAFY,QAAA,YAAY,gBAExB;AACM,MAAM,SAAS,GAAG,CAAC,IAAI,EAAE,EAAE;IAChC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAA;IACjB,MAAM,KAAK,GAAG,sBAAG,CAAC,IAAI,CACpB;QACE,EAAE,EAAE,IAAI,CAAC,EAAE;QACX,IAAI,EAAE,IAAI,CAAC,IAAI;QACf,KAAK,EAAE,IAAI,CAAC,KAAK;KAClB,EACD,OAAO,CAAC,GAAG,CAAC,UAAU,EACtB,EAAE,SAAS,EAAE,IAAI,EAAE,CACpB,CAAA;IACD,OAAO,KAAK,CAAC;AACf,CAAC,CAAA;AAZY,QAAA,SAAS,aAYrB;AAGM,MAAM,OAAO,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE;IACxC,MAAM,MAAM,GAAG,GAAG,CAAC,OAAO,CAAC,aAAa,CAAA;IAExC,IAAI,CAAC,MAAM,EAAE;QACX,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAA;QACf,GAAG,CAAC,IAAI,CAAC,EAAC,OAAO,EAAE,gBAAgB,EAAC,CAAC,CAAA;QACrC,OAAM;KACP;IAED,MAAM,CAAC,EAAE,KAAK,CAAC,GAAG,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;IAEnC,IAAI,CAAC,KAAK,EAAE;QACV,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAA;QACf,GAAG,CAAC,IAAI,CAAC,EAAC,OAAO,EAAE,iBAAiB,EAAC,CAAC,CAAA;QACtC,OAAM;KACP;IAED,IAAI;QACF,MAAM,IAAI,GAAG,sBAAG,CAAC,MAAM,CAAC,KAAK,EAAE,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAA;QACtD,GAAG,CAAC,IAAI,GAAG,IAAI,CAAA;QACf,IAAI,EAAE,CAAA;KACP;IAAC,OAAO,CAAC,EAAE;QACV,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAA;QAChB,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAA;QACf,GAAG,CAAC,IAAI,CAAC,EAAC,OAAO,EAAE,iBAAiB,EAAC,CAAC,CAAA;QACtC,OAAM;KACP;AACH,CAAC,CAAA;AA3BY,QAAA,OAAO,WA2BnB","sourcesContent":["import jwt from 'jsonwebtoken'\r\nimport bcrypt from 'bcrypt'\r\n\r\nexport const comparePasswords = (password, hash) => {\r\n  return bcrypt.compare(password, hash)\r\n}\r\n\r\nexport const hashPassword = (password) => {\r\n  return bcrypt.hash(password, 5)\r\n}\r\nexport const createJWT = (user) => {\r\n  console.log(user)\r\n  const token = jwt.sign(\r\n    {\r\n      id: user.id,\r\n      name: user.name,\r\n      email: user.email\r\n    },\r\n    process.env.JWT_SECRET,\r\n    { expiresIn: '1h' }\r\n  )\r\n  return token;\r\n}\r\n\r\n\r\nexport const protect = (req, res, next) => {\r\n  const bearer = req.headers.authorization\r\n\r\n  if (!bearer) {\r\n    res.status(401)\r\n    res.json({message: 'not authorized'})\r\n    return\r\n  }\r\n\r\n  const [, token] = bearer.split(' ')\r\n\r\n  if (!token) {\r\n    res.status(401)\r\n    res.json({message: 'not valid token'})\r\n    return\r\n  }\r\n\r\n  try {\r\n    const user = jwt.verify(token, process.env.JWT_SECRET)\r\n    req.user = user\r\n    next()\r\n  } catch (e) {\r\n    console.error(e)\r\n    res.status(401)\r\n    res.json({message: 'not valid token'})\r\n    return\r\n  }\r\n}\r\n\r\n"]}