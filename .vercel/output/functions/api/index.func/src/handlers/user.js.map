{"version":3,"file":"user.ts","sources":["C:\\Users\\lucas\\Projets\\ExpressKanbanApi\\KanbanExpressAPi\\src\\handlers\\user.ts"],"names":[],"mappings":";;;;;;AAAA,+CAA0B;AAC1B,0CAA2E;AAGpE,MAAM,aAAa,GAAG,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE;IAC9C,IAAI;QACF,MAAM,YAAY,GAAG,MAAM,YAAM,CAAC,IAAI,CAAC,UAAU,CAAC;YAChD,KAAK,EAAE;gBACL,KAAK,EAAE,GAAG,CAAC,IAAI,CAAC,KAAK;aACtB;SACF,CAAC,CAAC;QAEH,IAAI,YAAY,EAAE;YAChB,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,sBAAsB,EAAE,CAAC,CAAC;SAChE;QAED,MAAM,IAAI,GAAG,MAAM,YAAM,CAAC,IAAI,CAAC,MAAM,CAAC;YACpC,IAAI,EAAE;gBACJ,KAAK,EAAE,GAAG,CAAC,IAAI,CAAC,KAAK;gBACrB,QAAQ,EAAE,MAAM,IAAA,mBAAY,EAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC;gBAC/C,IAAI,EAAC,GAAG,CAAC,IAAI,CAAC,IAAI;aACnB;SACF,CAAC,CAAA;QAIF,MAAM,KAAK,GAAG,MAAM,IAAA,gBAAS,EAAC,IAAI,CAAC,CAAA;QACpC,OAAQ,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,CAAC,CAAA;KACvC;IAAC,OAAO,KAAK,EAAE;QACd,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAA;QAElB,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC;KACxC;AAEH,CAAC,CAAA;AA9BY,QAAA,aAAa,iBA8BzB;AAGM,MAAM,MAAM,GAAG,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE;IACvC,IAAI;QACF,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,GAAG,CAAC,IAAI,CAAA;QAEpC,IAAI,CAAC,KAAK,IAAI,CAAC,QAAQ,EAAE;YACvB,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,iCAAiC,EAAE,CAAC,CAAA;SAC5E;QAED,MAAM,IAAI,GAAG,MAAM,YAAM,CAAC,IAAI,CAAC,UAAU,CAAC;YACxC,KAAK,EAAE,EAAE,KAAK,EAAE;SACjB,CAAC,CAAA;QAEF,IAAI,CAAC,IAAI,EAAE;YACT,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,qBAAqB,EAAE,CAAC,CAAA;SAChE;QAED,MAAM,OAAO,GAAG,MAAM,IAAA,uBAAgB,EAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAA;QAE/D,IAAI,CAAC,OAAO,EAAE;YACZ,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,qBAAqB,EAAE,CAAC,CAAA;SAChE;QAED,MAAM,KAAK,GAAG,IAAA,gBAAS,EAAC,IAAI,CAAC,CAAA;QAC7B,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,CAAC,CAAA;KACvC;IAAC,OAAO,KAAK,EAAE;QACd,OAAO,CAAC,KAAK,CAAC,eAAe,EAAE,KAAK,CAAC,CAAA;QACrC,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,uBAAuB,EAAE,CAAC,CAAA;KAClE;AACH,CAAC,CAAA;AA5BY,QAAA,MAAM,UA4BlB","sourcesContent":["import prisma from '../db'\r\nimport { comparePasswords, createJWT, hashPassword } from '../modules/auth'\r\n\r\n\r\nexport const createNewUser = async (req, res) => {\r\n  try {\r\n    const existingUser = await prisma.user.findUnique({\r\n      where: {\r\n        email: req.body.email,\r\n      },\r\n    });\r\n\r\n    if (existingUser) {\r\n      return res.status(404).json({ error: 'Email already in use' });\r\n    }\r\n\r\n    const user = await prisma.user.create({\r\n      data: {\r\n        email: req.body.email,\r\n        password: await hashPassword(req.body.password),\r\n        name:req.body.name,\r\n      }\r\n    })\r\n\r\n   \r\n  \r\n    const token = await createJWT(user)\r\n   return  res.status(200).json({ token })\r\n  } catch (error) {\r\n    console.log(error)\r\n\r\n    return res.status(500).json({ error });\r\n  }\r\n \r\n}\r\n\r\n\r\nexport const signin = async (req, res) => {\r\n  try {\r\n    const { email, password } = req.body\r\n\r\n    if (!email || !password) {\r\n      return res.status(400).json({ message: \"Email and password are required\" })\r\n    }\r\n\r\n    const user = await prisma.user.findUnique({\r\n      where: { email }\r\n    })\r\n\r\n    if (!user) {\r\n      return res.status(401).json({ message: \"Invalid credentials\" })\r\n    }\r\n\r\n    const isValid = await comparePasswords(password, user.password)\r\n\r\n    if (!isValid) {\r\n      return res.status(401).json({ message: \"Invalid credentials\" })\r\n    }\r\n\r\n    const token = createJWT(user)\r\n    return res.status(200).json({ token })\r\n  } catch (error) {\r\n    console.error('Signin error:', error)\r\n    return res.status(500).json({ message: \"Internal server error\" })\r\n  }\r\n}"]}