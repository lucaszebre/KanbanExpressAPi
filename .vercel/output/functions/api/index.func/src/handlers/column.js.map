{"version":3,"file":"column.ts","sources":["C:\\Users\\lucas\\Projets\\ExpressKanbanApi\\KanbanExpressAPi\\src\\handlers\\column.ts"],"names":[],"mappings":"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","sourcesContent":["import prisma from \"../db\";\r\n\r\nexport const createColumns = async (req, res) => {\r\n  try {\r\n    // Validate that necessary data is provided\r\n    const { name } = req.body;\r\n    if (!name || !req.params.boardId) {\r\n      return res.status(400).json({ error: 'Name and boardId are required' });\r\n    }\r\n\r\n    // Create new column\r\n    const newColumn = await prisma.column.create({\r\n      data: {\r\n        name,\r\n        boardId:req.params.boardId,\r\n      },\r\n    });\r\n\r\n    // Respond with the created column\r\n    res.status(201).json(newColumn);\r\n  } catch (error) {\r\n    // Handle error\r\n    console.error('Error creating column: ', error);\r\n    res.status(500).send(error.message);\r\n  }\r\n};\r\n\r\n\r\nexport const addTaskColumn = async (req, res) => {\r\n  const { id } = req.params;\r\n  const { subtasks, ...newTask } = req.body;\r\n\r\n  try {\r\n    // Check if column exists\r\n    const column = await prisma.column.findUnique({ where: { id }});\r\n    if (!column) {\r\n      return res.status(404).send('Column not found');\r\n    }\r\n\r\n    // If column exists, create task along with subtasks\r\n    const createdTask = await prisma.task.create({\r\n      data: {\r\n        ...newTask,\r\n        column: {\r\n          connect: { id },\r\n        },\r\n        subtasks: {\r\n          create: subtasks.map(title => ({ title })),\r\n        },\r\n      },\r\n    });\r\n    res.status(201).json(createdTask);\r\n  } catch (error) {\r\n    console.error(error); // Log the error for debugging\r\n    res.status(500).send(error.message);\r\n  }\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  export const getColumn = async (req, res) => {\r\n    const { id } = req.params;\r\n    try {\r\n      const column = await prisma.column.findUnique({\r\n        where: { id },\r\n        include: {\r\n          tasks: {\r\n            include: {\r\n              subtasks: true,\r\n            },\r\n          },\r\n        },\r\n      });\r\n      if(!column){\r\n          return  res.status(401).send('Column not found')\r\n      }\r\n      res.json(column);\r\n    } catch (error) {\r\n      res.status(500).send(error.message);\r\n    }\r\n  };\r\n  \r\n  export const updateColumn = async (req, res) => {\r\n    const { id } = req.params;\r\n    try {\r\n      const updatedColumn = await prisma.column.update({\r\n        where: { id },\r\n        data: req.body,\r\n      });\r\n      res.json(updatedColumn);\r\n    } catch (error) {\r\n      res.status(500).send(error.message);\r\n    }\r\n  };\r\n  \r\n  export const deleteColumn = async (req, res) => {\r\n    const { id } = req.params;\r\n    try {\r\n      const deletedColumn = await prisma.column.delete({\r\n        where: { id },\r\n      });\r\n      res.json(deletedColumn);\r\n    } catch (error) {\r\n      res.status(500).send(error.message);\r\n    }\r\n  };\r\n  "]}