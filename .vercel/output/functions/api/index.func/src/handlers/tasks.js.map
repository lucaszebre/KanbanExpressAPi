{"version":3,"file":"tasks.ts","sources":["C:\\Users\\lucas\\Projets\\ExpressKanbanApi\\KanbanExpressAPi\\src\\handlers\\tasks.ts"],"names":[],"mappings":"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","sourcesContent":["import prisma  from \"../db\"\r\n\r\nexport const updateTaskSubtask = async (req, res) => {\r\n  const { id } = req.params;\r\n  const { updatedTask, subtasksAdd, subtasksChangeName, subtasksToDelete } = req.body;\r\n\r\n  try {\r\n    const task = await prisma.task.findUnique({\r\n      where: { id },\r\n      include: { subtasks: true },\r\n    });\r\n\r\n    if (!task) {\r\n      return res.status(404).json({ error: 'Task not found' });\r\n    }\r\n\r\n    if (subtasksToDelete && subtasksToDelete.length > 0) {\r\n      await prisma.subtask.deleteMany({\r\n        where: {\r\n          id: { in: subtasksToDelete },\r\n        },\r\n      });\r\n    }\r\n\r\n    if (subtasksChangeName && subtasksChangeName.length > 0) {\r\n      const updateSubtasksPromises = subtasksChangeName.map((subtask) =>\r\n        prisma.subtask.update({\r\n          where: { id: subtask.id },\r\n          data: { title: subtask.title },\r\n        })\r\n      );\r\n      await Promise.all(updateSubtasksPromises);\r\n    }\r\n\r\n    if (subtasksAdd && subtasksAdd.length > 0) {\r\n      const addSubtasksPromises = subtasksAdd.map((title) =>\r\n        prisma.subtask.create({\r\n          data: {\r\n            title,\r\n            task: { connect: { id } },\r\n          },\r\n        })\r\n      );\r\n      await Promise.all(addSubtasksPromises);\r\n    }\r\n\r\n    const updatedTaskResult = await prisma.task.update({\r\n      where: { id },\r\n      data: updatedTask,\r\n    });\r\n\r\n    res.json(updatedTaskResult);\r\n  } catch (error) {\r\n    res.status(500).json({ error: 'Server error' });\r\n  }\r\n};\r\n\r\nexport const deleteTask= async (req, res) => {\r\n  const { id } = req.params;\r\n\r\n  try {\r\n    // Find the task\r\n    const Deletedtask = await prisma.task.delete({\r\n      where: { id },\r\n      include: { subtasks: true },\r\n    });\r\n\r\n    res.json(Deletedtask);\r\n  } catch (error) {\r\n    res.status(500).json({ error: 'Server error' });\r\n  }\r\n \r\n}\r\nexport const getTask= async (req, res) => {\r\n  const { id } = req.params;\r\n\r\n  try {\r\n    // Find the task\r\n    const task = await prisma.task.findUnique({\r\n      where: { id },\r\n      include: { subtasks: true },\r\n    });\r\n\r\n    res.json(task);\r\n  } catch (error) {\r\n    res.status(500).json({ error: 'Server error' });\r\n  }\r\n \r\n}\r\n\r\nexport const moveTaskToColumn = async (req, res) => {\r\n  const { id, columnId } = req.params;\r\n\r\n  try {\r\n    // Check if task and new column exist\r\n    const [existingTask, newColumn] = await Promise.all([\r\n      prisma.task.findUnique({ where: { id: id} }),\r\n      prisma.column.findUnique({ where: { id: columnId } }),\r\n    ]);\r\n\r\n    if (!existingTask) {\r\n      return res.status(404).send('Task not found');\r\n    }\r\n\r\n    if (!newColumn) {\r\n      return res.status(404).send('Column not found');\r\n    }\r\n\r\n    // If task and column exist, update the task's columnId\r\n    const updatedTask = await prisma.task.update({\r\n      where: { id: id },\r\n      data: {\r\n        column: {\r\n          connect: { id: columnId },\r\n        },\r\n      },\r\n      include: {\r\n        subtasks: true, // Include related subtasks in the response\r\n      },\r\n    });\r\n\r\n    res.status(200).json(updatedTask);\r\n  } catch (error) {\r\n    console.error(error); // Log the error for debugging\r\n    res.status(500).send(error.message);\r\n  }\r\n};\r\n\r\n"]}