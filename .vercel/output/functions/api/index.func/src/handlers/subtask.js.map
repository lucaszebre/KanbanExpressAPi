{"version":3,"file":"subtask.ts","sources":["C:\\Users\\lucas\\Projets\\ExpressKanbanApi\\KanbanExpressAPi\\src\\handlers\\subtask.ts"],"names":[],"mappings":";;;;;;AAAA,+CAA2B;AAEpB,MAAM,UAAU,GAAE,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE;IAC1C,IAAI;QACF,MAAM,OAAO,GAAG,MAAM,YAAM,CAAC,OAAO,CAAC,UAAU,CAAC;YAC9C,KAAK,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,MAAM,CAAC,EAAE,EAAE;SAC7B,CAAC,CAAC;QACH,IAAI,CAAC,OAAO,EAAE;YACZ,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,mBAAmB,EAAE,CAAC,CAAC;SAC7D;QACD,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;KACnB;IAAC,OAAO,KAAK,EAAE;QACd,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;KAChD;AACH,CAAC,CAAA;AAZY,QAAA,UAAU,cAYtB;AAEM,MAAM,aAAa,GAAG,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE;IAC9C,IAAI;QACF,MAAM,UAAU,GAAG,MAAM,YAAM,CAAC,OAAO,CAAC,MAAM,CAAC;YAC7C,IAAI,EAAE,GAAG,CAAC,IAAI;SACf,CAAC,CAAC;QACH,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;KACtB;IAAC,OAAO,KAAK,EAAE;QACd,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;KAChD;AACH,CAAC,CAAA;AATY,QAAA,aAAa,iBASzB;AACM,MAAM,aAAa,GAAG,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE;IAE9C,IAAI;QACF,MAAM,cAAc,GAAG,MAAM,YAAM,CAAC,OAAO,CAAC,MAAM,CAAC;YACjD,KAAK,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,MAAM,CAAC,EAAE,EAAE;YAC5B,IAAI,EAAE,GAAG,CAAC,IAAI;SACf,CAAC,CAAC;QACH,GAAG,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;KAC1B;IAAC,OAAO,KAAK,EAAE;QACd,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;KAChD;AACH,CAAC,CAAA;AAXY,QAAA,aAAa,iBAWzB;AAEM,MAAM,aAAa,GAAG,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE;IAC9C,IAAI;QACF,MAAM,YAAM,CAAC,OAAO,CAAC,MAAM,CAAC;YAC1B,KAAK,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,MAAM,CAAC,EAAE,EAAE;SAC7B,CAAC,CAAC;QACH,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC;KACvB;IAAC,OAAO,KAAK,EAAE;QACd,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;KAChD;AACH,CAAC,CAAA;AATY,QAAA,aAAa,iBASzB","sourcesContent":["import prisma  from \"../db\"\r\n\r\nexport const getSubTask= async (req, res) => {\r\n  try {\r\n    const subtask = await prisma.subtask.findUnique({\r\n      where: { id: req.params.id }\r\n    });\r\n    if (!subtask) {\r\n      return res.status(404).json({ error: 'Subtask not found' });\r\n    }\r\n    res.json(subtask);\r\n  } catch (error) {\r\n    res.status(500).json({ error: error.message });\r\n  }\r\n}\r\n\r\nexport const createSubTask = async (req, res) => {\r\n  try {\r\n    const newSubtask = await prisma.subtask.create({\r\n      data: req.body\r\n    });\r\n    res.json(newSubtask);\r\n  } catch (error) {\r\n    res.status(500).json({ error: error.message });\r\n  }\r\n}\r\nexport const updateSubTask = async (req, res) => {\r\n  \r\n  try {\r\n    const updatedSubtask = await prisma.subtask.update({\r\n      where: { id: req.params.id },\r\n      data: req.body\r\n    });\r\n    res.json(updatedSubtask);\r\n  } catch (error) {\r\n    res.status(500).json({ error: error.message });\r\n  }\r\n}\r\n\r\nexport const deleteSubtask = async (req, res) => {\r\n  try {\r\n    await prisma.subtask.delete({\r\n      where: { id: req.params.id }\r\n    });\r\n    res.status(204).end();\r\n  } catch (error) {\r\n    res.status(500).json({ error: error.message });\r\n  }\r\n}\r\n\r\n"]}