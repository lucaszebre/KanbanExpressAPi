{"version":3,"file":"boards.ts","sources":["C:\\Users\\lucas\\Projets\\ExpressKanbanApi\\KanbanExpressAPi\\src\\handlers\\boards.ts"],"names":[],"mappings":";;;;;;AAAA,+CAA2B;AAEhB,MAAM,WAAW,GAAE,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE;IACzC,IAAI;QAEA,IAAG,GAAG,CAAC,MAAM,CAAC,OAAO,EAAC;YAElB,MAAM,KAAK,GAAG,MAAM,YAAM,CAAC,KAAK,CAAC,UAAU,CAAC;gBAC1C,KAAK,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,MAAM,CAAC,OAAO,EAAE;gBACjC,OAAO,EAAE;oBACP,OAAO,EAAE;wBACP,OAAO,EAAE;4BACP,KAAK,EAAE;gCACL,OAAO,EAAE;oCACP,QAAQ,EAAE,IAAI;iCACf;6BACF;yBACF;qBACF;iBACF;aACF,CAAC,CAAC;YACH,IAAI,CAAC,KAAK,EAAE;gBACV,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,iBAAiB,EAAE,CAAC,CAAC;aAC3D;iBAAI;gBACH,GAAG,CAAC,IAAI,CAAC,EAAC,IAAI,EAAE,KAAK,EAAC,CAAC,CAAA;aAExB;SACF;aAAI;YACH,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,YAAY,EAAE,CAAC,CAAC;SACtD;KAEN;IAAC,OAAO,KAAK,EAAE;QAChB,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,cAAc,EAAE,CAAC,CAAC;KAC/C;AAEL,CAAC,CAAA;AAjCY,QAAA,WAAW,eAiCvB;AAEM,MAAM,SAAS,GAAG,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE;IAC1C,IAAI;QACA,MAAM,MAAM,GAAG,MAAM,YAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;YACtC,KAAK,EAAE;gBACH,EAAE,EAAE,GAAG,CAAC,IAAI,CAAC,EAAE;aAClB;YACD,MAAM,EAAE;gBACJ,yCAAyC;gBACzC,EAAE,EAAE,IAAI;gBACR,IAAI,EAAE,IAAI;gBACV,KAAK,EAAE,IAAI;gBACX,MAAM,EAAE;oBACJ,MAAM,EAAE;wBACJ,EAAE,EAAE,IAAI;wBACR,IAAI,EAAE,IAAI;wBACV,OAAO,EAAE;4BACL,MAAM,EAAE;gCACJ,EAAE,EAAE,IAAI;gCACR,IAAI,EAAE,IAAI;gCACV,KAAK,EAAE;oCACH,MAAM,EAAE;wCACJ,EAAE,EAAE,IAAI;wCACR,KAAK,EAAE,IAAI;wCACX,QAAQ,EAAE,IAAI;wCACd,WAAW,EAAC,IAAI;qCAEnB;iCACJ;6BACJ;yBACJ;qBACJ;iBACJ;aACJ;SACJ,CAAC,CAAC;QAEH,GAAG,CAAC,IAAI,CAAE,MAAM,CAAC,CAAC;KACrB;IAAC,OAAO,KAAK,EAAE;QACZ,+BAA+B;QAC/B,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QACrB,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAC,KAAK,EAAE,6CAA6C,EAAC,CAAC,CAAC;KAChF;AACL,CAAC,CAAC;AAzCa,QAAA,SAAS,aAyCtB;AAEG,MAAM,WAAW,GAAG,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE;IAC9C,IAAI;QACE,iEAAiE;QACjE,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,GAAG,CAAC,IAAI,CAAC;QAGjC,MAAM,QAAQ,GAAG,MAAM,YAAM,CAAC,KAAK,CAAC,MAAM,CAAC;YACzC,IAAI,EAAE;gBACJ,IAAI,EAAE,IAAI;gBACV,IAAI,EAAE;oBACJ,OAAO,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,IAAI,CAAC,EAAE,EAAE;iBAC7B;gBACD,OAAO,EAAE;oBACP,MAAM,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC;iBACtD;aACF;YACD,OAAO,EAAE;gBACP,OAAO,EAAE,IAAI;aACd;SACF,CAAC,CAAC;QACH,GAAG,CAAC,IAAI,CAAC,EAAG,QAAQ,EAAE,CAAC,CAAC;KACvB;IACD,OAAO,KAAK,EAAE;QACd,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QACrB,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,cAAc,EAAE,CAAC,CAAC;KACjD;AACL,CAAC,CAAC;AA1BO,QAAA,WAAW,eA0BlB;AAEK,MAAM,WAAW,GAAG,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE;IAC1C,IAAI;QACA,IAAG,GAAG,CAAC,MAAM,CAAC,EAAE,EAAC;YACb,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,CAAA;YAC1B,MAAM,KAAK,GAAG,MAAM,YAAM,CAAC,KAAK,CAAC,UAAU,CAAC;gBACxC,KAAK,EAAE;oBACP,EAAE,EAAE,GAAG,CAAC,MAAM,CAAC,EAAE;iBAChB;aACJ,CAAC,CAAA;YACF,IAAI,CAAC,KAAK,EAAE;gBACV,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,iBAAiB,EAAE,CAAC,CAAC;aAC3D;iBAAI;gBAGD,MAAM,aAAa,GAAG,MAAM,YAAM,CAAC,KAAK,CAAC,MAAM,CAAC;oBAC9C,KAAK,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,MAAM,CAAC,EAAE,EAAE;oBAC5B,IAAI,EAAE,GAAG,CAAC,IAAI;oBACd,OAAO,EAAE;wBACP,OAAO,EAAE;4BACP,OAAO,EAAE;gCACP,KAAK,EAAE;oCACL,OAAO,EAAE;wCACP,QAAQ,EAAE,IAAI;qCACf;iCACF;6BACF;yBACF;qBACF;iBACF,CAAC,CAAC;gBAEH,GAAG,CAAC,IAAI,CAAC,EAAC,IAAI,EAAE,aAAa,EAAC,CAAC,CAAA;aAElC;SACF;aAAI;YACH,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,YAAY,EAAE,CAAC,CAAC;SACtD;KAEN;IAAC,OAAO,KAAK,EAAE;QACZ,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QACrB,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,cAAc,EAAE,CAAC,CAAC;KACrD;AAGL,CAAC,CAAA;AA3CY,QAAA,WAAW,eA2CvB;AAEM,MAAM,WAAW,GAAG,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE;IAC5C,IAAI;QACF,MAAM,OAAO,GAAG,MAAM,YAAM,CAAC,KAAK,CAAC,MAAM,CAAC;YACxC,KAAK,EAAE;gBACL,EAAE,EAAE,GAAG,CAAC,MAAM,CAAC,OAAO;aACvB;SACF,CAAC,CAAC;QAEH,GAAG,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC;KAC7B;IAAC,OAAO,KAAK,EAAE;QACd,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,4BAA4B,EAAE,CAAC,CAAC;KAC/D;AACH,CAAC,CAAA;AAZY,QAAA,WAAW,eAYvB","sourcesContent":["import prisma  from \"../db\"\r\n\r\n    export const getOneBoard= async (req, res) => {\r\n        try {\r\n\r\n            if(req.params.boardId){\r\n                \r\n                const board = await prisma.board.findUnique({\r\n                  where: { id: req.params.boardId },\r\n                  include: {\r\n                    columns: {\r\n                      include: {\r\n                        tasks: {\r\n                          include: {\r\n                            subtasks: true,\r\n                          },\r\n                        },\r\n                      },\r\n                    },\r\n                  },\r\n                });\r\n                if (!board) {\r\n                  return res.status(404).json({ error: 'Board not found' });\r\n                }else{\r\n                  res.json({data: board})\r\n          \r\n                }\r\n              }else{\r\n                return res.status(404).json({ error: 'Need an id' });\r\n              }\r\n\r\n        } catch (error) {\r\n        res.status(500).json({ error: 'Server error' });\r\n        }\r\n   \r\n    }\r\n\r\n    export const getBoards = async (req, res) => {\r\n      try {\r\n          const boards = await prisma.user.findMany({\r\n              where: {\r\n                  id: req.user.id\r\n              },\r\n              select: {\r\n                  // Include or exclude the fields you need\r\n                  id: true,\r\n                  name: true,\r\n                  email: true,\r\n                  boards: {\r\n                      select: {\r\n                          id: true,\r\n                          name: true,\r\n                          columns: {\r\n                              select: {\r\n                                  id: true,\r\n                                  name: true,\r\n                                  tasks: {\r\n                                      select: {\r\n                                          id: true,\r\n                                          title: true,\r\n                                          subtasks: true,\r\n                                          description:true,\r\n\r\n                                      }\r\n                                  }\r\n                              }\r\n                          }\r\n                      }\r\n                  }\r\n              }\r\n          });\r\n  \r\n          res.json( boards);\r\n      } catch (error) {\r\n          // Handle the error accordingly\r\n          console.error(error);\r\n          res.status(500).json({error: 'An error occurred while fetching the boards'});\r\n      }\r\n  };\r\n  \r\nexport const createboard = async (req, res) => {\r\ntry {\r\n      // Assuming user and product IDs are provided in the request body\r\n      const { name, columns } = req.body;\r\n     \r\n      \r\n        const newBoard = await prisma.board.create({\r\n          data: {\r\n            name: name,\r\n            user: {\r\n              connect: { id: req.user.id },\r\n            },\r\n            columns: {\r\n              create: columns.map((colName) => ({ name: colName })),\r\n            },\r\n          },\r\n          include: {\r\n            columns: true,\r\n          },\r\n        });\r\n        res.json({  newBoard });\r\n        }\r\n        catch (error) {\r\n        console.error(error);\r\n        res.status(500).json({ message: 'Server error' });\r\n        }\r\n    };\r\n\r\n    export const updateboard = async (req, res) => {\r\n        try {\r\n            if(req.params.id){\r\n                console.log(req.params.id)\r\n                const board = await prisma.board.findUnique({\r\n                    where: {\r\n                    id: req.params.id\r\n                    }\r\n                })\r\n                if (!board) {\r\n                  return res.status(404).json({ error: 'Board not found' });\r\n                }else{\r\n                   \r\n\r\n                    const updatedUpdate = await prisma.board.update({\r\n                      where: { id: req.params.id },\r\n                      data: req.body,\r\n                      include: {\r\n                        columns: {\r\n                          include: {\r\n                            tasks: {\r\n                              include: {\r\n                                subtasks: true,\r\n                              },\r\n                            },\r\n                          },\r\n                        },\r\n                      },\r\n                    });\r\n                \r\n                    res.json({data: updatedUpdate})\r\n          \r\n                }\r\n              }else{\r\n                return res.status(404).json({ error: 'Need an id' });\r\n              }\r\n\r\n        } catch (error) {\r\n            console.error(error);\r\n            res.status(500).json({ message: 'Server error' });\r\n        }\r\n    \r\n    \r\n    }\r\n\r\n    export const deleteboard = async (req, res) => {\r\n      try {\r\n        const deleted = await prisma.board.delete({\r\n          where: {\r\n            id: req.params.boardId\r\n          }\r\n        });\r\n    \r\n        res.json({ data: deleted });\r\n      } catch (error) {\r\n        res.status(500).json({ error: 'Failed to delete the board' });\r\n      }\r\n    }\r\n    "]}